CHROME filter: /^(.(?!instance|available))+$/

^    (?!(@Path)).*\n./
^.*(?<!GeneralWeb)Exception\(.*$


do date -u +"%F %T.%N"
while true; do date -u +"%F %T.%N"; sleep 1; done;


$ echo "date -u +'%F %T.%N'" | xargs -I{} (while true; do {}; sleep 1; done;)

ps aux | grep <regex>

mvn versions:display-dependency-updates | grep -B 0 -A 1 -E "jersey|spring-boot"
mvn dependency:tree


aws dynamodb scan \
--region 'eu-west-1' \
--table-name 'coleman_dataset_manila1' \
--attributes-to-get 'id'

aws dynamodb update-item \
--region 'eu-west-1' \
--table-name 'coleman_dataset_manila1' \
--key '{ "id": { "S": "d8bb6da3-c9ab-4604-88fd-c63b4d6e8232" } }' \
--update-expression 'SET newField = :nf' \
--expression-attribute-values '{ ":nf": { "S": "My New String" }}'

aws dynamodb update-item \
--region 'eu-west-1' \
--table-name 'coleman_dataset_manila1' \
--key '{ "id": { "S": "d8bb6da3-c9ab-4604-88fd-c63b4d6e8232" } }' \
--update-expression "REMOVE newField"


jguzman2@PHMANJGUZMAN01 MINGW64 ~/OneDrive - Infor/Desktop/workdump (master)
$ file -i error2.txt
error2.txt: application/octet-stream; charset=binary

jguzman2@PHMANJGUZMAN01 MINGW64 ~/OneDrive - Infor/Desktop/workdump (master)
$ cat error2.txt | tr -d '\000' > error3.txt

jguzman2@PHMANJGUZMAN01 MINGW64 ~/OneDrive - Infor/Desktop/workdump (master)
$ file -i error3.txt
error3.txt: text/plain; charset=us-ascii



clear!!
> nohup.out
tail -f /proc/<pid>/fd/1

echo "123" | sed "s|1|A|g"
echo "123" | sed "s|1|$HOME|g"


sudo find /. -name "*.py"

sudo find /. -name "*.py" | grep hadoop | xargs -n 1 -I{} cp {} ~/

scp -i ~/Navodar.pem ~/pretty_egrep.sh ec2-user@coleman2.awsiondev.infor.com:~/

export sourcePath="/c/Users/jguzman2/OneDrive - Infor/Desktop/python shenanigans/filter_tail.py"
scp -i ~/Navodar.pem ec2-user@manila1.cpaas.awsiondev.infor.com:~/nohup.branch_master.out ~/test.txt

scp -i ~/Navodar.pem ec2-user@manila1.cpaas.awsiondev.infor.com:~/nohup.branch_qa.out ./downloaded_logs.txt

ssh -i ~/Navodar.pem ec2-user@coleman2.awsiondev.infor.com


scp -i ~/Navodar.pem ec2-user@manila1.cpaas.awsiondev.infor.com:~/nohup.pipeline_12471.out ./downloaded_logs.txt
scp -i ~/Navodar.pem ec2-user@manila1.cpaas.awsiondev.infor.com:~/nohup.pipeline_12471.ASDASDASD ./downloaded_logs.txt

ls -t | grep ".out" | head -n 1 | xargs -I{} cat {} | grep -E "questId=ac87b1de-d758-4218-9063-fac67cb2b3bb(.*)portId=(.*)status=FAILED" | grep -o -E "activityId=[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" | uniq

export targetPath="ec2-user@manila1.cpaas.awsiondev.infor.com:/home/ec2-user/"
export sourcePath="/c/Users/jguzman2/git/coleman.ui/com.infor.colemanui.spring.backend/deploy/"
export sourceFiles="application.properties.template\ndeploy.sh\nrestart.sh"

printf ${sourceFiles} | grep ".sh" | xargs -n 1 -I{} echo ${sourcePath}{} | xargs -I{} sed -i 's/\r$//' {}

printf ${sourceFiles} | xargs -n 1 -I{} echo ${sourcePath}{} | xargs -d '\n' -I{} scp -i ~/Navodar.pem {} "${targetPath}"


ssh -i ~/Navodar.pem ec2-user@manila1.cpaas.awsiondev.infor.com 'ls -t | grep .out | head -n 1'


(echo Line1a ; echo Line2b && echo Line3a || echo "Last Line") | grep a
(echo Line1a ; echo Line2b && echo Line3a || echo "Last Line") | head -n 2
echo "blipblip" | xargs -I{} echo {} "toryah" {}


ls -t | head -n 1 | xargs -I{} tail -f -n +0 {} | nl | grep -E "EMR cluster"

ls -t | grep ".out" | head -n 1 | xargs -I{} cat {} | grep -E "questId=ac87b1de-d758-4218-9063-fac67cb2b3bb(.*)portId=(.*)status=FAILED" | grep -o -E "activityId=[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" | uniqnano


reset && ls -t | grep -E ".out$" | head -n 1 | xargs -I{} tail -f -n +0 {} | nl | grep -v -E ": get.*():" | grep -E "9055dcb2-e1e2-4af2-be4d-9b1aa8c8c4f0" | cut -c 1-512 | xargs -d '\n' -I{} printf "{}\n\n"


reset && ls -t | grep -E ".out$" | head -n 1 | xargs -I{} cat {} | nl | grep -v -E ": get.*():" | grep -E "9055dcb2-e1e2-4af2-be4d-9b1aa8c8c4f0" | cut -c 1-512 | xargs -d '\n' -I{} printf "{}\n\n"

reset && ls -t | grep -E ".out$" | head -n 1 | xargs -I{} tail -f -n +0 {} | nl | grep -v -E "getQuest()" | grep -E "0614955d-979f-4566-9149-f9742d93fed4|4099d18b-88c7-b2ec-b86f-c5e2aa4ee4be|49b590b7-c314-0b4e-3df7-2f773a566592|578ac445-b03f-d021-3ede-ee80ef279de9|a952c5e6-92c8-c13f-d42f-1af75b6b5191|7eecbec8-9854-55d5-3470-e6d8e8bd5d37|a1986082-01d7-7055-775c-1daf46bd5c65|5e5441cf-de39-8b06-003e-c2ef142f2138|9b24140c-22c9-e2fd-035b-d6b21c027eb6|1a99956c-1c66-ca3d-6023-44626d559492|e78b8cf7-a5db-57c0-ddcb-d5feb8647b4f|17bbf228-d8cf-e3b0-ae4a-3e5551b13dc0|982a0f51-e871-fe9d-f2e6-f32bed9ebbd6|547678ec-d044-b56b-d152-84d5e8f22a6a|34437561-b594-4c8e-bd10-148117997bdd|c69c547f-9bcb-448c-ad7a-6bdee0b5a6cc|5d7ccab2-8890-a818-60e7-6a1ac064c785|d2a39894-62be-98fc-770f-608b4e0ebcff|a7272b42-739c-84c2-5a1d-0ba743c121fe|5b9c08f6-9707-4ccf-706a-c17a42594453|c009ce5d-3ef0-31ce-15b6-8724c68e7650|0c839eb3-0c6e-b640-e9cd-753ffafd0d13|2fd633f6-2601-7bdf-2013-d1ede2bf8e30|b1557d2f-a973-6110-99e1-b78654ce0066|f7fc3d5d-cd48-6657-96ca-e9d1cc20c9e9|b974cf90-a7dd-63b9-3b77-da51e05c0e90|961e913a-ed7b-dd23-35bf-914038307aa8|b551b06c-f631-f030-db87-319f3acdb8a2|ed3959ac-0436-c46c-c68f-3ebefa85cef0|963f991f-fae3-e217-1710-ab1711c57ac7|ef5c7307-3dbc-0417-6a3d-180caa715275|fd0d439b-2678-d27b-6816-30068e684a05|f7897b10-8321-d3ac-d066-a74a2750c5a0|12d1f471-c7bb-a6b1-34ab-049edc434a1c|e719514c-5960-bfff-6180-03fa385ee83a|0f0b8ae2-3d57-e18b-62ad-be1d2c489322|91ebb0c3-af2d-ae57-8b9a-6517085a84fd|35189eb2-8c97-2b25-c2ad-3565bb26cc22|65015716-c4a2-f8ff-446d-60a7db04eaf5|a65b084c-bd3f-5f2c-1e8e-7b576d8e8606|56f47ab7-2746-9a26-05d9-ef6347fc4a21|f8a4843a-ffe4-9f20-14d9-21862b3a1584|271ff8d0-9e34-e9a6-1694-5d3b02063540|ab266095-3bb8-f709-b047-09aba0288192|ff3175b2-8645-962b-faa4-6fce68ecd5dc|b61e412e-7084-2f24-418a-c08d699f0666|13f53146-008d-30b8-a049-d07c826b42af|32412378-fcd7-28c4-0e17-5d1c406d7047|f1111d94-161a-15ac-8cb9-36bab6790c43|c386c53d-8640-f530-49fa-224ac3fbb63c|5d52dda0-7046-e180-d1dc-1141909c9c51|c9f79ad7-bcb5-2f68-33dc-2b6ed43632e8|e8bb4ede-3d87-7c07-6bf8-429e40488ef6|6a5ce254-3805-ee83-a610-90c9af36b0a3|65015716-c4a2-f8ff-446d-60a7db04eaf5|4099d18b-88c7-b2ec-b86f-c5e2aa4ee4be|cbb5ce80-480c-acae-80b2-0b14daabebd2|5d7ccab2-8890-a818-60e7-6a1ac064c785|56f47ab7-2746-9a26-05d9-ef6347fc4a21|16e2a0ab-d0ad-5fc3-7ca6-653ad9536fcc|e78b8cf7-a5db-57c0-ddcb-d5feb8647b4f|91ebb0c3-af2d-ae57-8b9a-6517085a84fd|8383f6ef-c975-b94a-714e-b53ccdd5191f|f1111d94-161a-15ac-8cb9-36bab6790c43|7eecbec8-9854-55d5-3470-e6d8e8bd5d37|4d620cf0-6fed-b258-81e5-94e2a6756d05|a7272b42-739c-84c2-5a1d-0ba743c121fe|ab266095-3bb8-f709-b047-09aba0288192|edf03797-4403-019d-e6ec-3f6ee35e34d7|0c839eb3-0c6e-b640-e9cd-753ffafd0d13|c69c547f-9bcb-448c-ad7a-6bdee0b5a6cc|9fe95b33-0d60-eb2b-a728-5783192f0ac7|ef5c7307-3dbc-0417-6a3d-180caa715275|f7fc3d5d-cd48-6657-96ca-e9d1cc20c9e9|c2e51595-892e-9781-ef61-b33424968b6b|f1111d94-161a-15ac-8cb9-36bab6790c43|35189eb2-8c97-2b25-c2ad-3565bb26cc22|0e9f08c5-3d96-fb96-cd30-2b62b78279bf|e719514c-5960-bfff-6180-03fa385ee83a|32412378-fcd7-28c4-0e17-5d1c406d7047|ba2342d9-bbf8-9ef6-0de4-855c93160e6c|49b590b7-c314-0b4e-3df7-2f773a566592|b1557d2f-a973-6110-99e1-b78654ce0066|4c7e6b82-a5be-2692-ea0c-257be7bb9e04|a1986082-01d7-7055-775c-1daf46bd5c65|963f991f-fae3-e217-1710-ab1711c57ac7|ab738f36-dbe2-7883-ed9c-4b4b3807b7af|c9f79ad7-bcb5-2f68-33dc-2b6ed43632e8|1a99956c-1c66-ca3d-6023-44626d559492|8fbd289e-f7b3-4e3c-e8f8-9f87540e38a1|982a0f51-e871-fe9d-f2e6-f32bed9ebbd6|c009ce5d-3ef0-31ce-15b6-8724c68e7650|0cb21ce3-67a4-e0bc-d779-bbd826055615|c386c53d-8640-f530-49fa-224ac3fbb63c|9b24140c-22c9-e2fd-035b-d6b21c027eb6|8ae830f0-ccaf-894b-1494-f7bf457331f8|c386c53d-8640-f530-49fa-224ac3fbb63c|ff3175b2-8645-962b-faa4-6fce68ecd5dc|9197ca5f-8741-7b55-86d6-6199e9f7f7d9|f8a4843a-ffe4-9f20-14d9-21862b3a1584|f7897b10-8321-d3ac-d066-a74a2750c5a0|965cb843-f59a-5661-3c4b-41322f361555|b61e412e-7084-2f24-418a-c08d699f0666|a952c5e6-92c8-c13f-d42f-1af75b6b5191|5b9c08f6-9707-4ccf-706a-c17a42594453|17bbf228-d8cf-e3b0-ae4a-3e5551b13dc0|5e5441cf-de39-8b06-003e-c2ef142f2138|2fd633f6-2601-7bdf-2013-d1ede2bf8e30|13f53146-008d-30b8-a049-d07c826b42af|d2a39894-62be-98fc-770f-608b4e0ebcff|578ac445-b03f-d021-3ede-ee80ef279de9|e8bb4ede-3d87-7c07-6bf8-429e40488ef6|271ff8d0-9e34-e9a6-1694-5d3b02063540|5d52dda0-7046-e180-d1dc-1141909c9c51|fd0d439b-2678-d27b-6816-30068e684a05|ed3959ac-0436-c46c-c68f-3ebefa85cef0|a65b084c-bd3f-5f2c-1e8e-7b576d8e8606|547678ec-d044-b56b-d152-84d5e8f22a6a|0f0b8ae2-3d57-e18b-62ad-be1d2c489322|e7fb7ba6-7e62-4567-b82d-f94dd3b00a09" | cut -c 1-512 | xargs -d '\n' -I{} printf "{}\n\n"

////////

### grep -v -E has problems with these tailf pipes!

reset && ls -t | grep -E ".out$" | head -n 1 | xargs -I{} cat {} | nl | grep -v -E "getQuest()" | grep -E "EMR cluster|39987f26-f706-4f66-9c0e-f71e0feb5559" | cut -c 1-512 | xargs -d '\n' -I{} printf "{}\n\n"

[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}

export grep_me="EMR cluster|9055dcb2-e1e2-4af2-be4d-9b1aa8c8c4f0|4099d18b-88c7-b2ec-b86f-c5e2aa4ee4be|49b590b7-c314-0b4e-3df7-2f773a566592|578ac445-b03f-d021-3ede-ee80ef279de9|a952c5e6-92c8-c13f-d42f-1af75b6b5191|7eecbec8-9854-55d5-3470-e6d8e8bd5d37|a1986082-01d7-7055-775c-1daf46bd5c65|5e5441cf-de39-8b06-003e-c2ef142f2138|9b24140c-22c9-e2fd-035b-d6b21c027eb6|1a99956c-1c66-ca3d-6023-44626d559492|e78b8cf7-a5db-57c0-ddcb-d5feb8647b4f|17bbf228-d8cf-e3b0-ae4a-3e5551b13dc0|c019bff9-05c8-86bf-dfd6-0d2d2455f32d|8fa6e0a2-63c0-7cf6-d203-ad102c6491a7|982a0f51-e871-fe9d-f2e6-f32bed9ebbd6|547678ec-d044-b56b-d152-84d5e8f22a6a|22463cf0-a1b9-4da1-a6e1-f2e185675482|c69c547f-9bcb-448c-ad7a-6bdee0b5a6cc|5d7ccab2-8890-a818-60e7-6a1ac064c785|d2a39894-62be-98fc-770f-608b4e0ebcff|c009ce5d-3ef0-31ce-15b6-8724c68e7650|0c839eb3-0c6e-b640-e9cd-753ffafd0d13|2fd633f6-2601-7bdf-2013-d1ede2bf8e30|963f991f-fae3-e217-1710-ab1711c57ac7|ef5c7307-3dbc-0417-6a3d-180caa715275|fd0d439b-2678-d27b-6816-30068e684a05|f7897b10-8321-d3ac-d066-a74a2750c5a0|12d1f471-c7bb-a6b1-34ab-049edc434a1c|e719514c-5960-bfff-6180-03fa385ee83a|0f0b8ae2-3d57-e18b-62ad-be1d2c489322|91ebb0c3-af2d-ae57-8b9a-6517085a84fd|35189eb2-8c97-2b25-c2ad-3565bb26cc22|65015716-c4a2-f8ff-446d-60a7db04eaf5|a65b084c-bd3f-5f2c-1e8e-7b576d8e8606|56f47ab7-2746-9a26-05d9-ef6347fc4a21|f8a4843a-ffe4-9f20-14d9-21862b3a1584|271ff8d0-9e34-e9a6-1694-5d3b02063540|ab266095-3bb8-f709-b047-09aba0288192|ff3175b2-8645-962b-faa4-6fce68ecd5dc|b61e412e-7084-2f24-418a-c08d699f0666|13f53146-008d-30b8-a049-d07c826b42af|8c3dbdec-3567-46a9-9c16-bb0dc5d0c8dd|6cd69d2d-5c4f-2c12-6c52-b2f6c3d3c746|74497bba-dbdf-fa0b-f831-2d8ad50504fd|e715af4d-e5a7-d308-1cc4-5633f09c0582|32412378-fcd7-28c4-0e17-5d1c406d7047|f1111d94-161a-15ac-8cb9-36bab6790c43|c386c53d-8640-f530-49fa-224ac3fbb63c|5d52dda0-7046-e180-d1dc-1141909c9c51|c9f79ad7-bcb5-2f68-33dc-2b6ed43632e8|e8bb4ede-3d87-7c07-6bf8-429e40488ef6|6a5ce254-3805-ee83-a610-90c9af36b0a3|65015716-c4a2-f8ff-446d-60a7db04eaf5|4099d18b-88c7-b2ec-b86f-c5e2aa4ee4be|7a94ec76-55c1-a469-4268-60d571bcd0ad|6cd69d2d-5c4f-2c12-6c52-b2f6c3d3c746|c69c547f-9bcb-448c-ad7a-6bdee0b5a6cc|cbb5ce80-480c-acae-80b2-0b14daabebd2|5d7ccab2-8890-a818-60e7-6a1ac064c785|56f47ab7-2746-9a26-05d9-ef6347fc4a21|16e2a0ab-d0ad-5fc3-7ca6-653ad9536fcc|e78b8cf7-a5db-57c0-ddcb-d5feb8647b4f|91ebb0c3-af2d-ae57-8b9a-6517085a84fd|8383f6ef-c975-b94a-714e-b53ccdd5191f|f1111d94-161a-15ac-8cb9-36bab6790c43|7eecbec8-9854-55d5-3470-e6d8e8bd5d37|96740bc8-da4a-b3dd-c1ac-ef0aaec6f69a|0c839eb3-0c6e-b640-e9cd-753ffafd0d13|8c3dbdec-3567-46a9-9c16-bb0dc5d0c8dd|c2e51595-892e-9781-ef61-b33424968b6b|f1111d94-161a-15ac-8cb9-36bab6790c43|35189eb2-8c97-2b25-c2ad-3565bb26cc22|0e9f08c5-3d96-fb96-cd30-2b62b78279bf|e719514c-5960-bfff-6180-03fa385ee83a|32412378-fcd7-28c4-0e17-5d1c406d7047|4c7e6b82-a5be-2692-ea0c-257be7bb9e04|a1986082-01d7-7055-775c-1daf46bd5c65|963f991f-fae3-e217-1710-ab1711c57ac7|ab738f36-dbe2-7883-ed9c-4b4b3807b7af|c9f79ad7-bcb5-2f68-33dc-2b6ed43632e8|1a99956c-1c66-ca3d-6023-44626d559492|8fbd289e-f7b3-4e3c-e8f8-9f87540e38a1|982a0f51-e871-fe9d-f2e6-f32bed9ebbd6|c009ce5d-3ef0-31ce-15b6-8724c68e7650|0cb21ce3-67a4-e0bc-d779-bbd826055615|c386c53d-8640-f530-49fa-224ac3fbb63c|9b24140c-22c9-e2fd-035b-d6b21c027eb6|8ae830f0-ccaf-894b-1494-f7bf457331f8|c386c53d-8640-f530-49fa-224ac3fbb63c|ff3175b2-8645-962b-faa4-6fce68ecd5dc|630bfb5e-e2b9-b1ee-f06e-d03f2d0bd344|c019bff9-05c8-86bf-dfd6-0d2d2455f32d|ab266095-3bb8-f709-b047-09aba0288192|9197ca5f-8741-7b55-86d6-6199e9f7f7d9|f8a4843a-ffe4-9f20-14d9-21862b3a1584|f7897b10-8321-d3ac-d066-a74a2750c5a0|965cb843-f59a-5661-3c4b-41322f361555|b61e412e-7084-2f24-418a-c08d699f0666|a952c5e6-92c8-c13f-d42f-1af75b6b5191|8fa6e0a2-63c0-7cf6-d203-ad102c6491a7|17bbf228-d8cf-e3b0-ae4a-3e5551b13dc0|5e5441cf-de39-8b06-003e-c2ef142f2138|2fd633f6-2601-7bdf-2013-d1ede2bf8e30|13f53146-008d-30b8-a049-d07c826b42af|d2a39894-62be-98fc-770f-608b4e0ebcff|578ac445-b03f-d021-3ede-ee80ef279de9|e8bb4ede-3d87-7c07-6bf8-429e40488ef6|271ff8d0-9e34-e9a6-1694-5d3b02063540|5d52dda0-7046-e180-d1dc-1141909c9c51|fd0d439b-2678-d27b-6816-30068e684a05|e715af4d-e5a7-d308-1cc4-5633f09c0582|a65b084c-bd3f-5f2c-1e8e-7b576d8e8606|547678ec-d044-b56b-d152-84d5e8f22a6a|0f0b8ae2-3d57-e18b-62ad-be1d2c489322|93e1d16f-d2a4-4522-9504-5743b54d75f8"
reset && ls -t | head -n 1 | xargs -I{} tail -f -n +0 {} | nl | grep -v -E "getQuest()" | grep -E ${grep_me} | cut -c 1-512 | xargs -d '\n' -I{} printf "{}\n\n"

	

ls -t | head -n 1 | xargs -I{} tail -f -n +0 {} | cut -c 1-1024 | nl | grep -v -E "getQuest()" | grep -E "EMR cluster|81df81fb-90cf-4625-ac78-b8b8bb005c5d|965cb843-f59a-5661-3c4b-41322f361555|9197ca5f-8741-7b55-86d6-6199e9f7f7d9|9c4991cf-3547-6c37-2c8d-011700efd27d|630bfb5e-e2b9-b1ee-f06e-d03f2d0bd344|a6b58c4b-c117-1a29-d055-df095b062145" | grep -E "Exception|FAILED|failed"



export line=323142
ls -t | head -n 1 | xargs -I{} vim -R +${line} {}
ls -t | head -n 1 | xargs -I{} vim -R +1139 {}



ls -t | head -n 1 | xargs -I{} cat {} | grep -n -E "uploaded part" | wc -l



spark    11115  0.8  4.1 3640872 338788 ?      Sl   00:40   0:17 /usr/lib/jvm/java-openjdk/bin/java -cp /usr/lib/spark/conf/:/usr/lib/spark/jars/*:/etc/hado$
hadoop   11252  0.9  6.3 2854024 516584 ?      Sl   00:41   0:18 /etc/alternatives/jre/bin/java -Xmx1000m -server -XX:OnOutOfMemoryError=kill -9 %p -Dhadoop$
hadoop   21052  0.0  0.0 110468  2192 pts/0    S+   01:13   0:00 grep --color=auto spark

sudo find / -iname '*log' | grep 'spark\|hadoop\|log4j\|java' | sudo xargs cat | grep 'java:106'

sudo tail -f /proc/11252/fd/1


sudo find / -iname '*log' | sudo xargs cat | grep 'java:106'	

 ls -t -l


[‎7/‎24/‎2018 3:36 PM]  
Hi David, I committed changes you suggested in COLEMANPAAS-162. However, I don't know how to check if it works as expected. 
 
[‎7/‎24/‎2018 3:41 PM]  David Sauer:  
Hi, try to run any Quest that has an external dataset (e.g. a dataset NOT loaded from Datalake) as the input. The best is dataset `test3` @coleman2 - because it failed previously.
 
[‎7/‎24/‎2018 3:45 PM]  
I see, alright I'll try that. Thanks!
 
[‎7/‎25/‎2018 5:21 PM]  
HI David, could I ask how are you able to monitor/peak inside the scripts that are being submitted to the EMR instance? Is there some file in EMR's EC2 instance that I could tail?
 
[‎7/‎25/‎2018 5:24 PM]  David Sauer:  
Hello, it is not the best way monitoring, but there is a log for EMR step.
Navigate please to amazon console -> EMR -> Clustees -> [choose the cluster] -> Steps -> View logs -> error output from the script is in stderr.

You can also run the script again via spark-submit, the scripts are not deleted after a run, the script location is in the log.
 
[‎7/‎25/‎2018 5:26 PM]  David Sauer:  
Note that log output visible in AWS console has a certain delay, AWS copies EMR logs to web interface in batches.
 
[‎7/‎25/‎2018 5:29 PM]  
Oh cool! I do see mentions of some .py scripts in these logs.
 
[‎7/‎25/‎2018 5:30 PM]  David Sauer:  
if you ran it again you would need to add -jackoffall library to the path and also set certain prosperties.
See com.infor.coleman.backend.execution.spark_emr.executor.LocalSparkQuestRunner#submitCode  for the example.
prosperties  -> properties
 
[‎7/‎25/‎2018 5:32 PM]  
I see, I'll keep these in mind.
 
[‎7/‎25/‎2018 5:33 PM]  
Thanks very much!
 
[‎7/‎25/‎2018 5:33 PM]  David Sauer:  
You are welcome.
 





[‎7/‎25/‎2018 5:36 PM]  Annika Pearl Colar:  
tapos kapag working na sa coleman2 magmerge request ka sa qa branch kung testable na
para may mag email na sa qa hahaha
 

/mnt/var/lib/hadoop/steps/

SPARK_HOME=/usr/lib/spark && \
spark-submit \
--master yarn \
--executor-memory 500m --driver-memory 500m \
--jars com.infor.colemanui.execution.emr-1.0.0-SNAPSHOT-jackofall.jar \
--conf "spark.driver.extraJavaOptions -Dredis.host=coleman-demo.nkeiwn.0001.euw1.cache.amazonaws.com -Dredis.port=6379" \
runme.py


        except Exception as e:
            print(e)

            L49